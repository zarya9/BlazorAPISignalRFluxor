@using BlazorAPI.ApiRequest
@using BlazorAPI.ApiRequest.Model
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager

<style>
    .chat-container {
        max-width: 800px;
        margin: 20px auto;
        padding: 20px;
        border-radius: 8px;
        background-color: #1f1f1f;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        display: flex;
        flex-direction: column;
        max-height: 350px;
    }

    .messages {
        flex-grow: 1;
        max-height: 400px;
        overflow-y: auto;
        margin-bottom: 20px;
    }

    .message {
        display: flex;
        margin-bottom: 15px;
    }

    .avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #4CAF50;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        color: white;
        margin-right: 10px;
    }

    .message-content {
        flex: 1;
    }

    .message-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 5px;
    }

    .message-sender {
        font-weight: bold;
        color: #ffffff;
    }

    .message-time {
        font-size: 0.8em;
        color: #888;
    }

    .message-text {
        color: #ffffff;
    }

    .input-container {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }

    .message-actions {
        display: flex;
        gap: 10px;
        margin-top: 5px;
    }

        .message-actions button {
            background: none;
            border: none;
            color: #888;
            cursor: pointer;
            font-size: 14px;
        }

            .message-actions button:hover {
                color: #4CAF50;
            }

    .input-container input {
        flex: 1;
        padding: 8px;
        border-radius: 4px;
        border: 1px solid #444444;
        background-color: #2d2d2d;
        color: #ffffff;
    }

    .input-container button {
        padding: 8px 16px;
        border-radius: 4px;
        border: none;
        background-color: #4CAF50;
        color: white;
        cursor: pointer;
    }

        .input-container button:active {
            background-color: #45a049;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }
</style>

<div class="chat-container">
    <div class="messages" @ref="messagesContainer">
        @foreach (var message in messages)
        {
            <div class="message">
                <div class="avatar">@message.SenderName[0]</div>
                <div class="message-content">
                    <div class="message-header">
                        <span class="message-sender">@message.SenderName</span>
                        <span class="message-time">@message.SentAt.ToLocalTime().ToString("HH:mm dd.MM.yyyy")</span>
                    </div>
                    <div class="message-text">@message.Text</div>
                    @if (isAdmin || message.SenderId == currentUserId)
                    {
                        <div class="message-actions">
                            <button @onclick="() => EditMessage(message.Id)">✏️</button>
                            @if (isAdmin)
                            {
                                <button @onclick="() => DeleteMessage(message.Id)">🗑️</button>
                            }
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <div class="input-container">
        <input @bind="newMessage" @onkeypress="HandleEnterPress" placeholder="Введите сообщение..." />
        <button @onclick="SendMessage">Отправить</button>
    </div>
</div>

@code {
    [Parameter]

    public int movieId { get; set; }
    private List<ChatMessageDto> messages = new();
    private HubConnection? hubConnection;
    private ElementReference messagesContainer;
    private bool isAdmin = false;
    private int? currentUserId = null;
    private string newMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity?.IsAuthenticated != true)
            {
                await JSRuntime.InvokeVoidAsync("alert", "Вы должны войти в систему, чтобы использовать чат.");
                return;
            }
            currentUserId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
            isAdmin = user.IsInRole("Администратор");
            messages = await Http.GetFromJsonAsync<List<ChatMessageDto>>($"api/Chat/messages/movie/{movieId}")
                ?? new List<ChatMessageDto>();
            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub")).Build();
            hubConnection.On<string, string, DateTime>("ReceiveMessage", (senderName, text, sentAt) =>
            {
                if (currentUserId.HasValue && senderName != user.Identity.Name)
                {
                    messages.Add(new ChatMessageDto
                        {
                            SenderName = senderName,
                            Text = text,
                            SentAt = sentAt,
                            SenderId = 0,
                            MovieId = movieId
                        });

                    InvokeAsync(StateHasChanged);
                    ScrollToBottom();
                }
            });
            hubConnection.Reconnected += async (connectionId) =>

            {

                await hubConnection.SendAsync("AddToGroup", movieId);

                await InvokeAsync(StateHasChanged);

            };



            hubConnection.Closed += async (error) =>

            {

                Console.WriteLine($"Соединение закрыто: {error?.Message}");

                await InvokeAsync(StateHasChanged);

            };



            await hubConnection.StartAsync();

            await hubConnection.SendAsync("AddToGroup", movieId);



            Console.WriteLine($"SignalR подключен. ConnectionId: {hubConnection.ConnectionId}");

        }

        catch (Exception ex)

        {

            Console.WriteLine($"Ошибка инициализации чата: {ex}");

            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка при инициализации чата: {ex.Message}");

        }

    }







    private async Task SendMessage()

    {

        if (string.IsNullOrWhiteSpace(newMessage))

        {

            await JSRuntime.InvokeVoidAsync("alert", "Сообщение не может быть пустым.");

            return;

        }



        try

        {

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

            var user = authState.User;



            var senderName = user.Identity?.Name ?? "Пользователь";

            var userId = int.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);



            // 1. Локально добавляем сообщение для немедленного отображения

            messages.Add(new ChatMessageDto

                {

                    SenderName = senderName,

                    Text = newMessage,

                    SentAt = DateTime.UtcNow,

                    SenderId = userId,

                    MovieId = movieId

                });



            // 2. Обновляем UI сразу после добавления

            await InvokeAsync(StateHasChanged);

            await ScrollToBottom();



            // 3. Отправляем сообщение через API

            var chatMessage = new ChatMessageRequest

                {

                    Message = newMessage,

                    MovieId = movieId,

                    UserId = userId

                };



            var response = await Http.PostAsJsonAsync("api/Chat/post", chatMessage);



            if (!response.IsSuccessStatusCode)

            {

                throw new Exception("Ошибка сохранения сообщения на сервере");

            }



            // 4. СОСИ

            newMessage = string.Empty;

            await InvokeAsync(StateHasChanged);



            // 5. Отправляем через SignalR

            if (hubConnection is not null && hubConnection.State == HubConnectionState.Connected)

            {

                await hubConnection.SendAsync("SendMessageToGroup", movieId, senderName, newMessage, DateTime.UtcNow);

            }

            else

            {

                Console.WriteLine("SignalR соединение не активно или не подключено.");

            }



        }

        catch (Exception ex)

        {

            Console.WriteLine($"Ошибка отправки сообщения: {ex}");

            await JSRuntime.InvokeVoidAsync("alert", $"Ошибка при отправке сообщения: {ex.Message}");

        }

    }

    private async Task EditMessage(int messageId)

    {

        var newMessageText = await JSRuntime.InvokeAsync<string>("prompt", "Введите новое сообщение:");

        if (!string.IsNullOrWhiteSpace(newMessageText))

        {

            var editRequest = new { Message = newMessageText };

            var response = await Http.PutAsJsonAsync($"api/Chat/edit/{messageId}", editRequest);



            if (response.IsSuccessStatusCode)

            {

                var msg = messages.FirstOrDefault(m => m.Id == messageId);

                if (msg != null)

                {

                    msg.Text = newMessageText;

                    StateHasChanged();

                }

            }

            else

            {

                await JSRuntime.InvokeVoidAsync("alert", "Ошибка при редактировании сообщения.");

            }

        }

    }



    private async Task DeleteMessage(int messageId)

    {

        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Вы уверены, что хотите удалить это сообщение?");

        if (confirm)

        {

            var response = await Http.DeleteAsync($"api/Chat/delete/{messageId}");

            if (response.IsSuccessStatusCode)

            {

                messages.RemoveAll(m => m.Id == messageId);

                StateHasChanged();

            }

            else

            {

                await JSRuntime.InvokeVoidAsync("alert", "Ошибка при удалении сообщения.");

            }

        }

    }



    private async Task ScrollToBottom()

    {

        await JSRuntime.InvokeVoidAsync("scrollToBottom", messagesContainer);

    }



    public async ValueTask DisposeAsync()

    {

        if (hubConnection is not null)

        {

            await hubConnection.DisposeAsync();

        }

    }



    private async Task HandleEnterPress(KeyboardEventArgs e)

    {

        if (e.Key == "Enter")

        {

            await SendMessage();

        }

    }



    public class ChatMessageDto

    {

        public int Id { get; set; }

        public string SenderName { get; set; }

        public int SenderId { get; set; }

        public string Text { get; set; }

        public DateTime SentAt { get; set; }

        public int? RecipientId { get; set; }

        public int? MovieId { get; set; }

    }
}